@model Fly.DomainModel.AreasT

@using (Ajax.BeginForm("Add", "AreaC", new AjaxOptions { OnBegin = "OnBegin", OnComplete = "OnComplete", OnSuccess = "OnSucess" }, new { id = "addForm" }))
{

    <div class="modal-body" style="background-color:#ffffff;">

        @Html.HiddenFor(model => model.Id, new { @class = "EmptyClassID" })
        @Html.HiddenFor(model => model.AreaCoordinates, new { @class = "EmptyClassID", @id = "txtCoordinates" })
        <div class="row">
            <div class="col-md-3">
                <div class="form-group">
                    <label class="text-bold">Name</label>
                    <span class="symbol required" aria-required="true"></span>
                    @Html.TextBoxFor(model => model.Name, new { @class = "form-control EmptyClass" })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "required" })
                </div>
            </div>

            <div class="col-xs-3">
                <div class="form-group">
                    <label for="form-field-select-1" class="text-bold">Country</label>
                    <select class="select2internal" name="CountryId">
                        @foreach (var item in Model.CountriesList)
                        {
                            <option value="@item.Id" @(item.Id == Model.CountryId ? "selected" : "") )>@item.Name</option>
                        }
                    </select>
                    @Html.ValidationMessageFor(m => m.CountryId, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>
        <div class="row">
            <div class="col-xs-12">
                <div id="googleMap" style="height:200px;width:100%;"></div>
            </div>
        </div>

    </div>
    <div class="modal-footer">
        <button type="submit" class="btn btn-success btnSave" id="btnSave">
            Save
        </button>
        <button type="button" class="btn btn-primary btn-o" data-dismiss="modal">
            Close
        </button>
    </div>
}



<script>
    $.validator.unobtrusive.parse("#addForm");
    $(document).ready(function () {
        $(".select2internal").select2();
    });


</script>

<script>
    var currentPoly = "@Model.AreaCoordinates";

    $(document).ready(function () {
        myMap();
    });

    var map;
    var marker;
    var polygonArray;
    var polyObj;
    function myMap() {
        var myCenter = new google.maps.LatLng(30.016164, 31.417952);
        var mapProp = { center: myCenter, zoom: 12, scrollwheel: false, draggable: true, mapTypeId: google.maps.MapTypeId.ROADMAP };
         map = new google.maps.Map(document.getElementById("googleMap"), mapProp);
        var drawingManager = new google.maps.drawing.DrawingManager({
            drawingMode: google.maps.drawing.OverlayType.POLYGON,
            drawingControl: true,
            drawingControlOptions: {
                position: google.maps.ControlPosition.TOP_CENTER,
                drawingModes: ['polygon']
            },
            polylineOptions: {
                editable: true,

            },
            //// markerOptions: { icon: 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png' },
            polygonOptions: {
                strokeWeight: 0,
                fillOpacity: 0.45,
                editable: true
            }
        });
        drawingManager.setMap(map);
        google.maps.event.addListener(drawingManager, 'polygoncomplete', function (polygon) {
            $("#txtCoordinates").val('');
            for (var i = 0; i < polygon.getPath().getLength() ; i++) {
                $("#txtCoordinates").val($("#txtCoordinates").val() + polygon.getPath().getAt(i).toUrlValue(6) + "$");
            }
            polygonArray = polygon;//.getPath();
        });


        if (currentPoly != "") {
            polygonArray = [];
            var splitedPathes = currentPoly.split("$").forEach(function (e) {
                if (e != undefined && e != "") {
                    polygonArray.push({ lat: Number(e.split(",")[0]), lng: Number(e.split(",")[1]) });
                }
            })
            // Construct the polygon.
            polyObj = new google.maps.Polygon({
                paths: polygonArray,
                strokeWeight: 0,
                fillOpacity: 0.45,
                editable: true
            });
            polyObj.setMap(map);
        }
    }


    fun
</script>