@model Fly.DomainModel.Vehicles

@{
    ViewBag.Title = "AddNew";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm())
{
    
<label>Name</label>
<input type="text"  name="Name" />
<br />
<label>Long</label>
<input type="text" name="LongV" id="longTxt"/>
<br />
<label>Lat</label>
<input type="text" name="LatV" id="latTxt" />
<br />
    <label>mapBounds</label>
    <textarea id="mapBounds" cols="10" rows="4"></textarea>
    <br />
    <label>Polly</label>
    @*<div id="ployy" ></div>*@
    <textarea id="polyTxt" cols="50" rows="4"></textarea>
    <br />
<input type="submit" value="save" />
}

<div id="googleMap" style="height:400px;width:100%;"></div>  
<script>
    var map;
    var marker;
    var polygonArray;
    function myMap() {
        alert(google.maps.geometry.spherical.computeDistanceBetween(new google.maps.LatLng(30.1703207, 31.226648), new google.maps.LatLng(30.1617312, 31.2280126)));
        if (navigator.geolocation) navigator.geolocation.getCurrentPosition(function (pos) {
            var me = new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude);
            
            var myCenter = new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude);//new google.maps.LatLng(20.296100, 85.824500);
            var mapProp = {
                polylineOptions: {
                    editable: true
                }, center: myCenter, zoom: 16, scrollwheel: false, draggable: true, mapTypeId: google.maps.MapTypeId.ROADMAP
            };
             map = new google.maps.Map(document.getElementById("googleMap"), mapProp);
             marker = new google.maps.Marker({ position: myCenter, draggable: true });

             google.maps.event.addListener(marker, 'dragend', function (event) {
                 console.log(polygonArray);
                 alert(google.maps.geometry.poly.containsLocation(event.latLng, polygonArray));
                document.getElementById("latTxt").value = event.latLng.lat();
                document.getElementById("longTxt").value = event.latLng.lng();
            });

            marker.setMap(map);

            google.maps.event.addListener(map, 'bounds_changed', function () {
                bounds = map.getBounds();
                ne = bounds.getNorthEast();
                sw = bounds.getSouthWest();
                document.getElementById('mapBounds').innerHTML = bounds.toUrlValue(6);
            });

            google.maps.event.addListener(map, 'click', function (event) {
                addMarker(event.latLng);
            });

            var drawingManager = new google.maps.drawing.DrawingManager({
                drawingMode: google.maps.drawing.OverlayType.POLYGON,
                drawingControl: true,
                drawingControlOptions: {
                    position: google.maps.ControlPosition.TOP_CENTER,
                    drawingModes: [ 'polygon']
                },
                polylineOptions: {
                    editable: true
                },
               //// markerOptions: { icon: 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png' },
                polygonOptions: {
                    strokeWeight: 0,
                    fillOpacity: 0.45,
                    editable: true
                }
            });
            drawingManager.setMap(map);

      
            google.maps.event.addListener(drawingManager, 'polygoncomplete', function (polygon) {
                //document.getElementById('ployy').innerHTML += "polygon points:" + "<br>";
                $("#polyTxt").text('');
                for (var i = 0; i < polygon.getPath().getLength() ; i++) {
                    $("#polyTxt").text($("#polyTxt").text() + polygon.getPath().getAt(i).toUrlValue(6) + "$");
                    //document.getElementById('ployy').innerHTML += polygon.getPath().getAt(i).toUrlValue(6) + "<br>";
                }
                //polygonArray.push(polygon);

                polygonArray =polygon;//.getPath();
            });

            google.maps.event.addListener(drawingManager, 'drawingmode_changed', function (polygon) {
                console.log(polygon);
            });

        }, function (error) {
                   var myCenter = new google.maps.LatLng(20.296100, 85.824500);
            var mapProp = { center: myCenter, zoom: 12, scrollwheel: false, draggable: true, mapTypeId: google.maps.MapTypeId.ROADMAP };
            var map = new google.maps.Map(document.getElementById("googleMap"), mapProp);
             marker = new google.maps.Marker({ position: myCenter, draggable: true });
            marker.setMap(map);

            google.maps.event.addListener(map, 'bounds_changed', function () {
                bounds = map.getBounds();
                ne = bounds.getNorthEast();
                sw = bounds.getSouthWest();
                document.getElementById('mapBounds').innerHTML = bounds.toUrlValue(6);


            });
        });

 
     

        }


    function addMarker(location) {
        alert(google.maps.geometry.poly.containsLocation(location, polygonArray));

        document.getElementById("latTxt").value = location.lat();
        document.getElementById("longTxt").value = location.lng();

        if (!marker || !marker.setPosition) {
            marker = new google.maps.Marker({
                position: location,
                map: map,
                draggable: true
            });
        } else {
            marker.setPosition(location);
        }
        

        //marker = new google.maps.Marker({
        //    position: location,
        //    map: map,
        //    draggable: true
        //});
    }
       

    function getPolygonCoords() {
        var len = map.getPath().getLength();
        var htmlStr = "";
        for (var i = 0; i < len; i++) {
            htmlStr += map.getPath().getAt(i).toUrlValue(5) + "<br>";
        }
        document.getElementById('ployy').innerHTML = htmlStr;
    }



    function initialize() {
        var map = new google.maps.Map(document.getElementById('googleMap'), {
            zoom: 10,
            center: new google.maps.LatLng(22.344, 114.048),
            mapTypeId: google.maps.MapTypeId.ROADMAP,
        //    disableDefaultUI: true,
            zoomControl: true
        });

        var polyOptions = {
            strokeColor: "#1E41AA",
            strokeOpacity: 1.0,
            strokeWeight: 3,
            map: map,
            fillColor: "#2652F2",
            fillOpacity: 0.6,
    
            editable: true
        };
        // Creates a drawing manager attached to the map that allows the user to draw
        // markers, lines, and shapes.
        drawingManager = new google.maps.drawing.DrawingManager({
            drawingMode: google.maps.drawing.OverlayType.POLYGON,
            drawingControlOptions: {
                drawingModes: [
                  google.maps.drawing.OverlayType.POLYGON
                ]
            },
            markerOptions: {
                draggable: true
            },
            polylineOptions: {
                editable: true
            },
            rectangleOptions: polyOptions,
            circleOptions: polyOptions,
            polygonOptions: polyOptions,
            map: map
        });

        google.maps.event.addListener(drawingManager, 'overlaycomplete', function (event) {
            if (event.type == google.maps.drawing.OverlayType.CIRCLE) {
                var radius = event.overlay.getRadius();
            }
        });
        google.maps.event.addListener(drawingManager, 'overlaycomplete', function (e) {
            if (e.type != google.maps.drawing.OverlayType.MARKER) {
                // Switch back to non-drawing mode after drawing a shape.
                drawingManager.setDrawingMode(null);
                // To hide:
                drawingManager.setOptions({
                   // drawingControl: false
                });

                // Add an event listener that selects the newly-drawn shape when the user
                // mouses down on it.
                var newShape = e.overlay;
                newShape.type = e.type;
                google.maps.event.addListener(newShape, 'click', function () {
                    setSelection(newShape);
                });
                setSelection(newShape);
            }
        });

        // Clear the current selection when the drawing mode is changed, or when the
        // map is clicked.
        google.maps.event.addListener(drawingManager, 'drawingmode_changed', clearSelection);
        google.maps.event.addListener(map, 'click', clearSelection);
        google.maps.event.addDomListener(document.getElementById('delete-button'), 'click', deleteSelectedShape);

        buildColorPalette();
    }
</script>  
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBLKRh7JfikPylbNdGfTiDbe6zut1yabxo&libraries=drawing,geometry&callback=myMap"></script>  
